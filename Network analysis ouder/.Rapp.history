a <- 3 ,4 ,5
b <- 3 4 5
b
b <- 3;4;5
b
c <- 3,4,5
read.table("/Users/peterverboon/Documents/Thuiswerk OU/SPSS DATA/Basis.csv", header = TRUE, sep = "", dec = ".")
dat
dat[1,1:2]
datb[1,1:5]
getwd()
setwd(test)
setwd("/Users/peterverboon/Documenten/Open Universiteit/Onderzoek/R workspace")
ls()
setwd("/Users/peterverboon/Documenten")
a = 3
a
b = 2 1 3
b = 1,2,3,4,
b = [1 2 3]
b = c[1,2,3]
b = c[1 2 3]
b
library (Hmisc)
x <- c(1,2,3)
x
x <- c(1,2,3)
x
sqr(.59)
help(square)
help(arithmic)
a<-.59**.59
a
a*(1.187756*2)
a<-.59**2
a
cov<-a*(1.187756**2)*(0.85367**2)
cov
v1<-(0.85367**2)
v2<-(1.187756**2)
v1
v2
v3<-(1.02911**2)
cov<-a*v1*v3
cov
cov<-a*v2*v3
cov
v1,v2,v3
c(v1,v2,v3)
vintercept<-(1.02911**2)
vint<-(1.02911**2)
vint
cor<- cov**.5
cor
cov
v1<-1.059
v2<-1.411
cov<-0.7217
c <- cov/((v1**.5)*(v2**.5))
c
library(foreign);
data1 <-read.spss("DATA CFA2.sav", use.value.labels=TRUE, to.data.frame=TRUE)
data1 <-read.spss("~/Documents/Open Universiteit/OP Modelleren/Datasets/DATA CFA2.sav", use.value.labels=TRUE, to.data.frame=TRUE)
Model1 <- ' # Three fairness variables predict Counter Productive behaviour, mediated bij Trust en Cynism #    #
          # latent variables definitions: measurement model#
          FCB =~ CB_item1 + CB_item2 + CB_item3#
          FCYN =~ CYN_item1 + CYN_item2 + CYN_item3#
          FTR =~ TR_item1 + TR_item2 + TR_item3#
          FIR =~ IR_item1 + IR_item2 + IR_item3#
          FPR =~ PR_item1 + PR_item2 + PR_item3#
          FDR =~ DR_item1 + DR_item2 + DR_item3#
          # regressions: structural model#
          FCB ~ FTR + FCYN#
          FTR ~ FIR + FPR + FDR#
          FCYN ~ FIR + FPR + FDR#
          # variances and covariances#
          # intercepts#
           '
fit <- sem(Model1, data = data1)
fit <- lavaan(Model1, data = data1)
library(lavaan);
fit <- sem(Model1, data = data1)
summary(fit, fit.measures = TRUE)
fit <-  lavaan(Model1, data = data1)
Model1 <- ' # Three fairness variables predict Counter Productive behaviour, mediated bij Trust en Cynism #    #
          # latent variables definitions: measurement model#
          FCB =~ CB_item1 + CB_item2 + CB_item3#
          FCYN =~ CYN_item1 + CYN_item2 + CYN_item3#
          FTR =~ TR_item1 + TR_item2 + TR_item3#
          FIR =~ IR_item1 + IR_item2 + IR_item3#
          FPR =~ PR_item1 + PR_item2 + PR_item3#
          FDR =~ DR_item1 + DR_item2 + DR_item3#
          # regressions: structural model#
          FCB ~ FTR + FCYN#
          FTR ~ FIR + FPR + FDR#
          FCYN ~ FIR + FPR + FDR#
          # variances and covariances#
          FIR ~~ FIR#
          FPR ~~ FPR#
          FDR ~~ FDR#
          FTR ~~ FTR#
          FCYN ~~ FCYN#
          FCB ~~ FCB#
          # intercepts#
           '
fit <- sem(Model1, data = data1)
summary(fit, fit.measures = TRUE)
fit <-  lavaan(Model1, data = data1)
Model1 <- ' # Three fairness variables predict Counter Productive behaviour, mediated bij Trust en Cynism #    #
          # latent variables definitions: measurement model#
          FCB =~ CB_item1 + CB_item2 + CB_item3#
          FCYN =~ CYN_item1 + CYN_item2 + CYN_item3#
          FTR =~ TR_item1 + TR_item2 + TR_item3#
          FIR =~ IR_item1 + IR_item2 + IR_item3#
          FPR =~ PR_item1 + PR_item2 + PR_item3#
          FDR =~ DR_item1 + DR_item2 + DR_item3#
          # regressions: structural model#
          FCB ~ FTR + FCYN#
          FTR ~ FIR + FPR + FDR#
          FCYN ~ FIR + FPR + FDR#
          # variances and covariances#
          FIR ~~ FIR#
          FPR ~~ FPR#
          FDR ~~ FDR#
          FTR ~~ FTR#
          FCYN ~~ FCYN#
          FCB ~~ FCB#
          FIR ~~ FPR#
          FIR ~~ FDR#
          FPR ~~ FDR#
          FTR ~~ FCYN#
          # intercepts#
           '
fit <- sem(Model1, data = data1)
fit <-  lavaan(Model1, data = data1)
fit <- sem(Model1, data = data1)
summary(fit, fit.measures = TRUE)
fit <-  lavaan(Model1, data = data1, estimator = ML)
fit <-  lavaan(Model1, data = data1, estimator = "ML")
fit <-  lavaan(Model1, data = data1, estimator = "GLS")
fit <-  lavaan(Model1, data = data1, estimator = "ML", std.lv = FALSE, auto.var = TRUE )
summary(fit, fit.measures = TRUE)
fit <-  lavaan(Model1, data = data1, estimator = "ML", std.lv = FALSE, auto.fix.first = TRUE )
summary(fit, fit.measures = TRUE, standardized = TRUE)
fit <-  lavaan(Model1, data = data1, estimator = "ML", std.lv = FALSE, auto.var = TRUE, auto.fix.first = TRUE )
summary(fit, fit.measures = TRUE, standardized = TRUE)
fit <-  lavaan(Model1, data = data1, estimator = "ML", auto.var = TRUE, auto.fix.first = TRUE )
summary(fit, fit.measures = TRUE, standardized = TRUE)
help(rep)
x <- rep("a",5)
x
x <- rep(c("a","b"),5)
x
x <- rep(c("a","b"),c(5,2))
x
x <- rep(c("a","b"),c(5,20))
x
y <- rep(c(1,2,3,4,5),5)
y
help(dim)
data1<- c(x,y)
data1
data1 <-dim(25,2)
dim(data1)
dim(data1) <-c(25,2)
dim(data1)
data1
data1[6:25,2]<- data1[6:25,2] + 3
data1[6:25,2]
y
data1[1:25,2]<- y
data1
dim(data2)<-c(25,2)
data2 <- NULL
dim(data2)<-c(25,2)
data2 <- rep(1,50)
dim(data2)<-c(25,2)
data2[1:25,2]<- y
data2
data2[1:25,1]<- x
data2
data2[1:25,2]<- y
data2
data2[1:25,2]<- as.integer(y)
data2
mean(data2)
help(table)
help(frame)
help(dataframe)
help(data frame)
data2[1:25,2]<- is.integer(y)
data2
data2[1:25,2]<- as.integer(y)
data2
is.integer(y)
y
is.integer(y[1])
is.numeric(y[1])
is.numeric(y)
data2[1:25,2]<- as.numeric(y)
data2
data2[1:25,2]<- as.numeric
data2[1:25,2]<- as.numeric(data2[1:25,2])
data2
data3 <- data.frame(x,y)
data3
dim(data3)
dim(data3) = numeric
data3 = numeric
data3
data3 <- data.frame(x,y)
data3 == numeric
data3 == is.numeric
is.numeric(data3)
is.numeric(data3[[,1]])
is.numeric(data3[[1:25,1]])
is.numeric(data3[[1,1]])
is.numeric(data3[[1,2]])
A <- data3[1:5,2]
A
B <- data3[6:25,2]
B
data3[6:25,2]<- data3[6:25,2] + 3
B <- data3[6:25,2]
B
sum.all <- sum(c(A,B))
sum.all
mean.diff
mean.diff <- mean(A)
mean.diff
Ntot <- length(c(A,B))
Ntot
Nrest <- Ntot - Nmin
Nmin <- 5
Nrest <- Ntot - Nmin
Ntot <- length(c(A,B))#
Nmin <- 5#
Nrest <- Ntot - Nmin#
mean.diff <- mean(A) #
sum.all <- sum(c(A,B))#
#
result <- NULL#
for (i in 1:1000)#
{#
	sum1 <- sum(sample(c(A,B),Nmin))#
	sum2 <- sum.all - sum1#
	result[i] <- sum2/Nrest - sum1/Nmin#
}#
#
p <- sum(abs(result) >= abs(mean.diff))/1000#
#
p
result
mean.diff
sort(result)
data3 <- data.frame(x,y)
data3[6:25,2] <- data3[6:25,2] + 2
A <- data3[1:5,2]#
B <- data3[6:25,2]
mean.diff <- mean(A) #
sum.all <- sum(c(A,B))
mean.diff
data3
mean.diff <- mean(B) - mean(A)
mean.diff
Nmin <- 5#
Ntot <- length(c(A,B))#
Nrest <- Ntot - Nmin#
mean.diff <- mean(B) - mean(A)#
sum.all <- sum(c(A,B))#
#
result <- NULL#
for (i in 1:1000)#
{#
	sum1 <- sum(sample(c(A,B),Nmin))#
	sum2 <- sum.all - sum1#
	result[i] <- sum2/Nrest - sum1/Nmin#
}#
#
p <- sum(abs(result) >= abs(mean.diff))/1000#
mean.diff#
p
sort(result)
result <- NULL#
for (i in 1:1000)#
{#
	sum1 <- sum(sample(c(A,B),Nmin))#
	sum2 <- sum.all - sum1#
	result[i] <- sum2/Nrest - sum1/Nmin#
}#
#
p_onetailed <- sum(result >= abs(mean.diff))/1000#
p_twotailed <- sum(abs(result) >= abs(mean.diff))/1000#
mean.diff#
p_onetailed#
p_twotailed
sort(result)
library(SCRT);
library(SCMA);
graph(design = "AB")
graph(file= data3, design = "AB")
help(graph)
graph(design = "AB", data = data3)
observed(design = "AB", statistic = "B-A")
observed(design = "AB", statistic = "B-A", data = data3)
help(observed)
data(data3)
distribution.systematic(design = "AB", statistic = "B-A",limit=5)
distribution.systematic(design = "AB", statistic = "B-A",limit=5, data = data3)
distribution.random(design = "AB", statistic = "B-A",number = 100, limit=5, data = data3)
pvalue.systematic(design = "AB", statistic = "B-A",limit=5, data = data3)
pvalue.random(design = "AB", statistic = "B-A",limit=5, data = data3)
pvalue.random(design = "AB", statistic = "B-A",number = 100, limit=5, data = data3)
observed(design = "AB", statistic = "A-B", data = data3)
observed(design = "AB", statistic = "|a-b|", data = data3)
observed(design = "AB", statistic = "|B-A|", data = data3)
observed(design = "AB", statistic = "B-A", data = data3)
observed(design = "AB", statistic = "|A - B|", data = data3)
observed(design = "AB", statistic = "|A-B|", data = data3)
data3
edit(data3)
data3
data3[1:5,1]<- "A"
data3[[1:5,1]]<- "A"
edit(data3)
data3
x <- rep(c("A","B"),c(5,20))
x
data3 <- data.frame(x,y)
data3
data3[6:25,2] <- data3[6:25,2] + 2
data3
graph(design = "AB", data = data3)
observed(design = "AB", statistic = "|A-B|", data = data3)
pvalue.systematic(design = "AB", statistic = "B-A",limit=5, data = data3)
pvalue.random(design = "AB", statistic = "B-A",number = 100, limit=5, data = data3)
distribution.systematic(design = "AB", statistic = "B-A",limit=5, data = data3)
pvalue.random(design = "AB", statistic = "B-A",number = 100, limit=5, data = data3)
distribution.random(design = "AB", statistic = "B-A",number = 100, limit=5, data = data3)
pvalue.random(design = "AB", statistic = "B-A",number = 100, limit=5, data = data3)
pvalue.random(design = "AB", statistic = "B-A",number = 1000, limit=5, data = data3)
distribution.random(design = "AB", statistic = "B-A",number = 1000, limit=5, data = data3)
graph
graph(design = "AB", data = data3)
mean.diff <- mean(B) - mean(A)#
sum.all <- sum(c(A,B))#
#
result <- NULL#
for (i in 1:1000)#
{#
	sum1 <- sum(sample(c(A,B),Nmin))#
	sum2 <- sum.all - sum1#
	result[i] <- sum2/Nrest - sum1/Nmin#
}#
#
p_onetailed <- sum(result >= abs(mean.diff))/1000#
p_twotailed <- sum(abs(result) >= abs(mean.diff))/1000#
mean.diff#
p_onetailed#
p_twotailed
setwd("~/Documents/Open Universiteit/Onderzoek/Methodologie/Network analysis")#
getwd()
networkdata=read.table(file="Data S4.txt",header=TRUE,sep=",")
require(mvtnorm)#
require(arm)#
require(qgraph)
addTrans <- function(color,trans)#
{#
  # This function adds transparency to a color.#
  # Define transparency with an integer between 0 and 255#
  # 0 being fully transparent and 255 being fully visable#
  # Works with either color and trans a vector of equal length,#
  # or one of the two of length 1.#
  if (length(color)!=length(trans)&!any(c(length(color),length(trans))==1)) #
    stop("Vector lengths not correct")#
  if (length(color)==1 & length(trans)>1) color <- rep(color,length(trans))#
  if (length(trans)==1 & length(color)>1) trans <- rep(trans,length(color))#
  num2hex <- function(x)#
  {#
    hex <- unlist(strsplit("0123456789ABCDEF",split=""))#
    return(paste(hex[(x-x%%16)/16+1],hex[x%%16+1],sep=""))#
  }#
  rgb <- rbind(col2rgb(color),trans)#
  res <- paste("#",apply(apply(rgb,2,num2hex),2,paste,collapse=""),sep="")#
  return(res)#
}#
#
################################################################
################# Lag function #################################
################################################################
#
#This function lags the data appropriately (within person, within day).#
#
lagK_data=function(x,vv,K) {#
  #x the data you want to be lagged#
#vv are the names of the columns of the variable you want to lag#
  #k the number of lags#
  dimens=dim(x)#
  pp=unique(x$subjno)#
  npp=length(pp)#
  LEvv=length(vv)#
  nday=10#
  x=cbind(x,matrix(NA,dimens[1],K*LEvv+1))#
  for (j in 1:npp){#
    for (dd in 1:nday){#
      for (ss in 0:1){#
        uu=x[(x$subjno==pp[j])&(x$dayno==dd)&(x$st_p==ss),vv]#
        end=dim(uu)#
        Luu=array(NA,end)#
        for (k in 1:K){#
          x[(x$subjno==pp[j])&(x$dayno==dd)&(x$st_p==ss),(dimens[2]+1+(k-1)*LEvv):(dimens[2]+k*LEvv)]=rbind(t(rep(NA,LEvv)%*%t(rep(1,k))),as.matrix(uu[1:(end[1]-k),]))#
        }#
        x[(x$subjno==pp[j])&(x$dayno==dd)&(x$st_p==ss),(dimens[2]+1+K*LEvv)] = c(rep(0,K),rep(1,end[1]-K))#
      }}}#
  colnames(x)[(dimens[2]+1):(dimens[2]+K*LEvv+1)]<-c(paste(rep(vv,times=K),rep("L",K*LEvv),rep(1:K,each=LEvv),sep=""),"lagK")#
  # change the names of the lagged columns to names with an extra L (lagged)#
  return(x)#
}#
################################################################
################# Lagging the data #############################
################################################################
#
columns=c("opgewkt_","onplplez","pieker","angstig_","somber__","ontspann")#
#these are the six variables used in the analysis#
#
#A crash course in Dutch#
#opgewekt= cheerful#
#onplez= pleasantness of the event#
#pieker= worry#
#angstig= fearful#
#somber= sad#
#ontspann= relaxed#
#
#data are lagged (with K=1, thus lag 1)#
networkdataL=lagK_data(networkdata,columns,1) # this may take a few minutes#
head(networkdataL)
model1=list()#
columns=c("opgewkt_","onplplez","pieker","angstig_","somber__","ontspann")#
#
pred1 = "(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1)+st_period+(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1):st_period+st_period:informat04+st_period:(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1):informat04+(factor(st_period)-1+#
           opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1|subjno)"#
for (j in 1:6){#
  ff=as.formula(paste(columns[j],"~",pred1,sep=""))#
  model1[[j]]<-lmer(ff,data=networkdataL,control=list(maxIter=800),REML=FALSE)#
  print(j)#
}#
#
BIC1=unlist(lapply(model1,BIC))#
#
sum(BIC1)
model1=list()#
columns=c("opgewkt_","onplplez","pieker","angstig_","somber__","ontspann")#
#
pred1 = "(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1)+st_period+(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1):st_period+st_period:informat04+st_period:(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1):informat04+(factor(st_period)-1+        opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1|subjno)"
pred1
pred1 = "(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1)+st_period+(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1):st_period+st_period:informat04+st_period:(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1):informat04+(factor(st_period)-1+opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1|subjno)"#
for (j in 1:6){#
  ff=as.formula(paste(columns[j],"~",pred1,sep=""))#
  model1[[j]]<-lmer(ff,data=networkdataL,control=list(maxIter=800),REML=FALSE)#
  print(j)#
}#
#
BIC1=unlist(lapply(model1,BIC))#
#
sum(BIC1)
model1=list()#
columns=c("opgewkt_","onplplez","pieker","angstig_","somber__","ontspann")#
#
pred1 = "(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1)+st_period+(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1):st_period+st_period:informat04+st_period:(opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1):informat04+(factor(st_period)-1+opgewkt_L1+onplplezL1+piekerL1+angstig_L1+somber__L1+ontspannL1|subjno)"#
for (j in 1:6){#
  ff=as.formula(paste(columns[j],"~",pred1,sep=""))#
  model1[[j]]<-lmer(ff,data=networkdataL,control=list(maxIter=800),REML=FALSE)#
  print(j)#
}#
#
BIC1=unlist(lapply(model1,BIC))#
#
sum(BIC1)
